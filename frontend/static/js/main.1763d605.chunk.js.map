{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","window","location","hostname","includes","search","text","a","fetch","result","json","output","ResultTable","data","className","style","textAlign","map","rowdata","Text","Confidence","href","Source","target","App","React","useState","setData","searchText","setSearchText","loadingResults","setLoadingResults","runSearch","useEffect","placeholder","value","onChange","e","onClick","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAKMA,G,OADWC,QAAUA,OAAOC,UAAYD,OAAOC,SAASC,UACpCC,SAAS,aAAe,wBAA0B,I,SAG7DC,E,8EAAf,WAAsBC,GAAtB,iBAAAC,EAAA,sEACuBC,MAAOR,EAAW,oBAAoBM,GAD7D,cACQG,EADR,gBAE+BA,EAAOC,OAFtC,cAEQC,EAFR,yBAGSA,GAHT,4C,sBAuCA,SAASC,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,KACpB,OACE,yBAAKC,UAAU,mBACb,+BACE,wBAAIC,MAAO,CAACC,UAAW,UACrB,8CACA,0CACA,wCAGJ,+BACGH,EAAKI,KAAI,SAACC,GAAD,OAAc,4BACtB,4BAAKA,EAAQC,MACb,4BAAKD,EAAQE,YACb,4BAAI,uBAAGC,KAAMH,EAAQI,OAAQC,OAAO,UAAhC,iBAOCC,MAtDf,WAAgB,IAAD,EACUC,IAAMC,SAAiB,IADjC,mBACNb,EADM,KACDc,EADC,OAEsBF,IAAMC,SAAS,IAFrC,mBAENE,EAFM,KAEKC,EAFL,OAG8BJ,IAAMC,UAAS,GAH7C,mBAGNI,EAHM,KAGSC,EAHT,cAIEC,EAJF,8EAIb,WAAyB1B,GAAzB,eAAAC,EAAA,6DACEwB,GAAkB,GADpB,SAEuB1B,EAAOC,GAF9B,OAEQG,EAFR,OAGEsB,GAAkB,GAClBJ,EAAQlB,GAJV,4CAJa,sBAeb,OALAgB,IAAMQ,WAAU,WACd,sBAAC,sBAAA1B,EAAA,sDACCyB,EAAU,IADX,0CAAD,KAGA,IAEA,yBAAKlB,UAAU,OACb,kDADF,4KAGE,yBAAKA,UAAU,iBACb,2BAAOoB,YAAY,uBACnBC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAcQ,EAAEd,OAAOY,UACxC,4BAAQG,QAAS,kBAAMN,EAAUJ,KAAjC,WAEDE,GAAkB,iDAGnB,kBAAClB,EAAD,CAAaC,KAAMA,MC9BL0B,QACW,cAA7BtC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASqC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1763d605.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { object } from 'prop-types';\n\nconst hostname = window && window.location && window.location.hostname;\nconst BASE_URL = hostname.includes('localhost') ? \"http://localhost:5000\" : ''\ninterface data {Source:string,Text:string,Confidence:string};\n\nasync function search(text:string){\n  const result = await fetch( BASE_URL + \"/api/search?text=\"+text);\n  const output: data[] = await result.json();\n  return output;\n}\n\nfunction App() {\n  const [data,setData] = React.useState<data[]>([]);\n  const [searchText,setSearchText] = React.useState(\"\");\n  const [loadingResults,setLoadingResults] = React.useState(false);\n  async function runSearch(text:string){\n    setLoadingResults(true);\n    const result = await search(text);\n    setLoadingResults(false);\n    setData(result);\n  }\n  React.useEffect(() => {\n    (async () => {\n      runSearch(\"\");\n    })()\n  },[]);\n  return (\n    <div className=\"App\">\n      <h1>Covid paper Search</h1>\n      Thousands of covid19 researchers are publishing papers to help address coronavirus. We are making thousands of papers searchable using question and answer AI technology.\n      <div className=\"cvd-searchbar\">\n        <input placeholder=\"enter text to search\"\n        value={searchText}\n        onChange={(e) => setSearchText(e.target.value)}></input>\n        <button onClick={() => runSearch(searchText)}>Search</button>\n      </div>\n      {loadingResults && <div>\n        AI is running...\n      </div>}\n      <ResultTable data={data} />\n    </div>\n  );\n}\n\nfunction ResultTable({data}:{data:data[]}){\n  return (\n    <div className=\"cvd-resulttable\">\n      <thead>\n        <tr style={{textAlign: \"right\"}}>\n          <th>Search results</th>\n          <th>Confidence</th>\n          <th>source</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((rowdata) => (<tr>\n          <td>{rowdata.Text}</td>\n          <td>{rowdata.Confidence}</td>\n          <td><a href={rowdata.Source} target=\"_blank\">source</a></td>\n        </tr>))}\n      </tbody>\n    </div>\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './mvp.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}